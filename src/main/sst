#!/usr/bin/env bash
# ？用于批量生成ss快捷脚本，解决ss服务器切换效率问题。

this_file="$(readlink --canonicalize-missing "${BASH_SOURCE[0]}")"
this_file_name="$(basename "${this_file}")"
this_dir="$(dirname "${this_file}")"



# 创建配置目录。？用于存放ss脚本
dir="$HOME/.sst"
mkdir "${dir}" -p



if [ "url" == "${1}" ]; then
	# 获取所有待测试的ip或域名。？用于解析
	grep -P '\-s .* \-p' -r "${dir}" | sed -E "s/.*-s (.*) -p.*/\1/g"
elif [ "init" == "$1" ]; then
	ip=""
	port="$2"
	pass="$3"

	# 读取标准输入的内容
	readarray -t input </dev/stdin

	for i in ${input[*]}
	do
		ip="${i}"
		cmd="sudo killall sslocal ; nohup sslocal -s "${ip}" -p "${port}" -k "${pass}" -qq & > /dev/null"
		#cmd="sudo killall sslocal ; nohup sslocal -s \"${ip}\" -p \"${port}\" -k \"${pass}\" -qq &"
		echo "${cmd}"
		ssfile="${dir}/sst${ip}"
		cat<<EOF>${ssfile} # 必须EOF不能缩进
#!/usr/bin/env bash
${cmd}
EOF
		chmod +x "${ssfile}"
	done
else
	cat "${this_file}"
	echo "${this_file}"
fi


# 配置.ss目录到PATH变量

: <<'Block_Comments'
while read line
do
  echo "$line"
done < "${1:-/dev/stdin}"

mapfile -t input </dev/stdin
read -r firstline
for i in ${input[*]}
do
	echo "${i}"
done

Block_Comments
